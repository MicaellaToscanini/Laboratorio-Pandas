import pandas as pd
import numpy as np
import datetime as dt

# Generar un DataFrame con los datos de los cuatro archivos
emisiones_2016 = pd.read_csv('emisiones-2016.csv', sep=';')
emisiones_2017 = pd.read_csv('emisiones-2017.csv', sep=';')
emisiones_2018 = pd.read_csv('emisiones-2018.csv', sep=';')
emisiones_2019 = pd.read_csv('emisiones-2019.csv', sep=';')
emisiones = pd.concat([emisiones_2016, emisiones_2017, emisiones_2018, emisiones_2019])

# Filtrar las columnas
columnas = ['ESTACION', 'MAGNITUD', 'ANO', 'MES']
columnas.extend([col for col in emisiones if col.startswith('D')])
emisiones = emisiones[columnas]

# Reestructurar el DataFrame para que los valores de los días aparezcan en una única columna
emisiones = emisiones.melt(id_vars=['ESTACION', 'MAGNITUD', 'ANO', 'MES'], var_name='DIA', value_name='VALOR')

# Eliminar el carácter 'D' del inicio de la columna 'DIA'
emisiones['DIA'] = emisiones['DIA'].str.strip('D')

# Crear la columna 'FECHA'
emisiones['FECHA'] = pd.to_datetime(emisiones.ANO.astype(str) + '-' + emisiones.MES.astype(str) + '-' + emisiones.DIA.astype(str), 
                                    format='%Y-%m-%d', errors='coerce')

# Eliminar las filas con fechas no válidas
emisiones = emisiones.dropna(subset=['FECHA'])

# Ordenar el DataFrame por estación, magnitud y fecha
emisiones.sort_values(['ESTACION', 'MAGNITUD', 'FECHA'], inplace=True)

# Mostrar las estaciones y contaminantes disponibles
print('Estaciones:', emisiones['ESTACION'].unique())
print('Contaminantes:', emisiones['MAGNITUD'].unique())

# Función para obtener la evolución de un contaminante en una estación y rango de fechas
def evolucion(estacion, contaminante, desde, hasta):
    desde = pd.Timestamp(desde)
    hasta = pd.Timestamp(hasta)
    return emisiones[(emisiones['ESTACION'] == estacion) & 
                     (emisiones['MAGNITUD'] == contaminante) & 
                     (emisiones['FECHA'] >= desde) & 
                     (emisiones['FECHA'] <= hasta)].sort_values('FECHA')['VALOR']

# Probar la función 'evolucion'
print(evolucion(56, 8, '2018-10-25', '2019-02-12'))

# Resumen descriptivo por contaminantes
print(emisiones.groupby('MAGNITUD')['VALOR'].describe())

# Resumen descriptivo por contaminantes y estaciones
print(emisiones.groupby(['ESTACION', 'MAGNITUD'])['VALOR'].describe())

# Función para resumen descriptivo de un contaminante en una estación
def resumen(estacion, contaminante):
    return emisiones[(emisiones['ESTACION'] == estacion) & 
                     (emisiones['MAGNITUD'] == contaminante)]['VALOR'].describe()

# Probar la función 'resumen'
print('Resumen Dióxido de Nitrógeno en Plaza Elíptica:\n', resumen(56, 8))
print('Resumen Dióxido de Nitrógeno en Plaza del Carmen:\n', resumen(35, 8))

# Función para obtener las emisiones medias mensuales de un contaminante en un año
def evolucion_mensual(contaminante, ano):
    return emisiones[(emisiones['MAGNITUD'] == contaminante) & 
                     (emisiones['ANO'] == ano)].groupby(['ESTACION', 'MES'])['VALOR'].mean().unstack('MES')

# Probar la función 'evolucion_mensual'
print(evolucion_mensual(8, 2019))

# Función para obtener las medias mensuales de todos los contaminantes en una estación
def evolucion_mensual_estacion(estacion, ano):
    return emisiones[(emisiones['ESTACION'] == estacion) & 
                     (emisiones['ANO'] == ano)].groupby(['MAGNITUD', 'MES'])['VALOR'].mean().unstack('MES')

# Probar la función 'evolucion_mensual_estacion'
print(evolucion_mensual_estacion(4, 2019))
